/**
 * @fileoverview gRPC-Web generated client stub for backend
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: backend_api.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.backend = require('./backend_api_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.backend.BackendClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.backend.BackendPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.StartSimulationRequest,
 *   !proto.backend.StartSimulationReply>}
 */
const methodDescriptor_Backend_StartSimulation = new grpc.web.MethodDescriptor(
  '/backend.Backend/StartSimulation',
  grpc.web.MethodType.UNARY,
  proto.backend.StartSimulationRequest,
  proto.backend.StartSimulationReply,
  /**
   * @param {!proto.backend.StartSimulationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.StartSimulationReply.deserializeBinary
);


/**
 * @param {!proto.backend.StartSimulationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.StartSimulationReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.StartSimulationReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.startSimulation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/StartSimulation',
      request,
      metadata || {},
      methodDescriptor_Backend_StartSimulation,
      callback);
};


/**
 * @param {!proto.backend.StartSimulationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.StartSimulationReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.startSimulation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/StartSimulation',
      request,
      metadata || {},
      methodDescriptor_Backend_StartSimulation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.LoadSimulationRequest,
 *   !proto.backend.LoadSimulationReply>}
 */
const methodDescriptor_Backend_LoadSimulation = new grpc.web.MethodDescriptor(
  '/backend.Backend/LoadSimulation',
  grpc.web.MethodType.UNARY,
  proto.backend.LoadSimulationRequest,
  proto.backend.LoadSimulationReply,
  /**
   * @param {!proto.backend.LoadSimulationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.LoadSimulationReply.deserializeBinary
);


/**
 * @param {!proto.backend.LoadSimulationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.LoadSimulationReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.LoadSimulationReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.loadSimulation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/LoadSimulation',
      request,
      metadata || {},
      methodDescriptor_Backend_LoadSimulation,
      callback);
};


/**
 * @param {!proto.backend.LoadSimulationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.LoadSimulationReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.loadSimulation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/LoadSimulation',
      request,
      metadata || {},
      methodDescriptor_Backend_LoadSimulation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.ResizeSimulationRequest,
 *   !proto.backend.ResizeSimulationReply>}
 */
const methodDescriptor_Backend_ResizeSimulation = new grpc.web.MethodDescriptor(
  '/backend.Backend/ResizeSimulation',
  grpc.web.MethodType.UNARY,
  proto.backend.ResizeSimulationRequest,
  proto.backend.ResizeSimulationReply,
  /**
   * @param {!proto.backend.ResizeSimulationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.ResizeSimulationReply.deserializeBinary
);


/**
 * @param {!proto.backend.ResizeSimulationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.ResizeSimulationReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.ResizeSimulationReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.resizeSimulation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/ResizeSimulation',
      request,
      metadata || {},
      methodDescriptor_Backend_ResizeSimulation,
      callback);
};


/**
 * @param {!proto.backend.ResizeSimulationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.ResizeSimulationReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.resizeSimulation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/ResizeSimulation',
      request,
      metadata || {},
      methodDescriptor_Backend_ResizeSimulation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.GetEnvironmentInfoRequest,
 *   !proto.backend.GetEnvironmentInfoReply>}
 */
const methodDescriptor_Backend_GetEnvironmentInfo = new grpc.web.MethodDescriptor(
  '/backend.Backend/GetEnvironmentInfo',
  grpc.web.MethodType.UNARY,
  proto.backend.GetEnvironmentInfoRequest,
  proto.backend.GetEnvironmentInfoReply,
  /**
   * @param {!proto.backend.GetEnvironmentInfoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.GetEnvironmentInfoReply.deserializeBinary
);


/**
 * @param {!proto.backend.GetEnvironmentInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.GetEnvironmentInfoReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.GetEnvironmentInfoReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.getEnvironmentInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/GetEnvironmentInfo',
      request,
      metadata || {},
      methodDescriptor_Backend_GetEnvironmentInfo,
      callback);
};


/**
 * @param {!proto.backend.GetEnvironmentInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.GetEnvironmentInfoReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.getEnvironmentInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/GetEnvironmentInfo',
      request,
      metadata || {},
      methodDescriptor_Backend_GetEnvironmentInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.GetSimulationProgressionSpeedRequest,
 *   !proto.backend.GetSimulationProgressionSpeedReply>}
 */
const methodDescriptor_Backend_GetSimulationProgressionSpeed = new grpc.web.MethodDescriptor(
  '/backend.Backend/GetSimulationProgressionSpeed',
  grpc.web.MethodType.UNARY,
  proto.backend.GetSimulationProgressionSpeedRequest,
  proto.backend.GetSimulationProgressionSpeedReply,
  /**
   * @param {!proto.backend.GetSimulationProgressionSpeedRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.GetSimulationProgressionSpeedReply.deserializeBinary
);


/**
 * @param {!proto.backend.GetSimulationProgressionSpeedRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.GetSimulationProgressionSpeedReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.GetSimulationProgressionSpeedReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.getSimulationProgressionSpeed =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/GetSimulationProgressionSpeed',
      request,
      metadata || {},
      methodDescriptor_Backend_GetSimulationProgressionSpeed,
      callback);
};


/**
 * @param {!proto.backend.GetSimulationProgressionSpeedRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.GetSimulationProgressionSpeedReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.getSimulationProgressionSpeed =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/GetSimulationProgressionSpeed',
      request,
      metadata || {},
      methodDescriptor_Backend_GetSimulationProgressionSpeed);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.ChangeSimulationProgressionSpeedRequest,
 *   !proto.backend.ChangeSimulationProgressionSpeedReply>}
 */
const methodDescriptor_Backend_ChangeSimulationProgressionSpeed = new grpc.web.MethodDescriptor(
  '/backend.Backend/ChangeSimulationProgressionSpeed',
  grpc.web.MethodType.UNARY,
  proto.backend.ChangeSimulationProgressionSpeedRequest,
  proto.backend.ChangeSimulationProgressionSpeedReply,
  /**
   * @param {!proto.backend.ChangeSimulationProgressionSpeedRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.ChangeSimulationProgressionSpeedReply.deserializeBinary
);


/**
 * @param {!proto.backend.ChangeSimulationProgressionSpeedRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.ChangeSimulationProgressionSpeedReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.ChangeSimulationProgressionSpeedReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.changeSimulationProgressionSpeed =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/ChangeSimulationProgressionSpeed',
      request,
      metadata || {},
      methodDescriptor_Backend_ChangeSimulationProgressionSpeed,
      callback);
};


/**
 * @param {!proto.backend.ChangeSimulationProgressionSpeedRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.ChangeSimulationProgressionSpeedReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.changeSimulationProgressionSpeed =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/ChangeSimulationProgressionSpeed',
      request,
      metadata || {},
      methodDescriptor_Backend_ChangeSimulationProgressionSpeed);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.CreateNewSpeciesRequest,
 *   !proto.backend.CreateNewSpeciesReply>}
 */
const methodDescriptor_Backend_CreateNewSpecies = new grpc.web.MethodDescriptor(
  '/backend.Backend/CreateNewSpecies',
  grpc.web.MethodType.UNARY,
  proto.backend.CreateNewSpeciesRequest,
  proto.backend.CreateNewSpeciesReply,
  /**
   * @param {!proto.backend.CreateNewSpeciesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.CreateNewSpeciesReply.deserializeBinary
);


/**
 * @param {!proto.backend.CreateNewSpeciesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.CreateNewSpeciesReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.CreateNewSpeciesReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.createNewSpecies =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/CreateNewSpecies',
      request,
      metadata || {},
      methodDescriptor_Backend_CreateNewSpecies,
      callback);
};


/**
 * @param {!proto.backend.CreateNewSpeciesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.CreateNewSpeciesReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.createNewSpecies =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/CreateNewSpecies',
      request,
      metadata || {},
      methodDescriptor_Backend_CreateNewSpecies);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.CreateNewCreatureRequest,
 *   !proto.backend.CreateNewCreatureReply>}
 */
const methodDescriptor_Backend_CreateNewCreature = new grpc.web.MethodDescriptor(
  '/backend.Backend/CreateNewCreature',
  grpc.web.MethodType.UNARY,
  proto.backend.CreateNewCreatureRequest,
  proto.backend.CreateNewCreatureReply,
  /**
   * @param {!proto.backend.CreateNewCreatureRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.CreateNewCreatureReply.deserializeBinary
);


/**
 * @param {!proto.backend.CreateNewCreatureRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.CreateNewCreatureReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.CreateNewCreatureReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.createNewCreature =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/CreateNewCreature',
      request,
      metadata || {},
      methodDescriptor_Backend_CreateNewCreature,
      callback);
};


/**
 * @param {!proto.backend.CreateNewCreatureRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.CreateNewCreatureReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.createNewCreature =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/CreateNewCreature',
      request,
      metadata || {},
      methodDescriptor_Backend_CreateNewCreature);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.GetSpeciesListRequest,
 *   !proto.backend.GetSpeciesListReply>}
 */
const methodDescriptor_Backend_GetSpeciesList = new grpc.web.MethodDescriptor(
  '/backend.Backend/GetSpeciesList',
  grpc.web.MethodType.UNARY,
  proto.backend.GetSpeciesListRequest,
  proto.backend.GetSpeciesListReply,
  /**
   * @param {!proto.backend.GetSpeciesListRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.GetSpeciesListReply.deserializeBinary
);


/**
 * @param {!proto.backend.GetSpeciesListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.GetSpeciesListReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.GetSpeciesListReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.getSpeciesList =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/GetSpeciesList',
      request,
      metadata || {},
      methodDescriptor_Backend_GetSpeciesList,
      callback);
};


/**
 * @param {!proto.backend.GetSpeciesListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.GetSpeciesListReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.getSpeciesList =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/GetSpeciesList',
      request,
      metadata || {},
      methodDescriptor_Backend_GetSpeciesList);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.DefineNewSpeciesRelationshipRequest,
 *   !proto.backend.DefineNewSpeciesRelationshipReply>}
 */
const methodDescriptor_Backend_DefineNewSpeciesRelationship = new grpc.web.MethodDescriptor(
  '/backend.Backend/DefineNewSpeciesRelationship',
  grpc.web.MethodType.UNARY,
  proto.backend.DefineNewSpeciesRelationshipRequest,
  proto.backend.DefineNewSpeciesRelationshipReply,
  /**
   * @param {!proto.backend.DefineNewSpeciesRelationshipRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.DefineNewSpeciesRelationshipReply.deserializeBinary
);


/**
 * @param {!proto.backend.DefineNewSpeciesRelationshipRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.DefineNewSpeciesRelationshipReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.DefineNewSpeciesRelationshipReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.defineNewSpeciesRelationship =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/DefineNewSpeciesRelationship',
      request,
      metadata || {},
      methodDescriptor_Backend_DefineNewSpeciesRelationship,
      callback);
};


/**
 * @param {!proto.backend.DefineNewSpeciesRelationshipRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.DefineNewSpeciesRelationshipReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.defineNewSpeciesRelationship =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/DefineNewSpeciesRelationship',
      request,
      metadata || {},
      methodDescriptor_Backend_DefineNewSpeciesRelationship);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.GetSpeciesInfoRequest,
 *   !proto.backend.SpeciesInfo>}
 */
const methodDescriptor_Backend_GetSpeciesInfo = new grpc.web.MethodDescriptor(
  '/backend.Backend/GetSpeciesInfo',
  grpc.web.MethodType.UNARY,
  proto.backend.GetSpeciesInfoRequest,
  proto.backend.SpeciesInfo,
  /**
   * @param {!proto.backend.GetSpeciesInfoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.SpeciesInfo.deserializeBinary
);


/**
 * @param {!proto.backend.GetSpeciesInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.SpeciesInfo)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.SpeciesInfo>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.getSpeciesInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/GetSpeciesInfo',
      request,
      metadata || {},
      methodDescriptor_Backend_GetSpeciesInfo,
      callback);
};


/**
 * @param {!proto.backend.GetSpeciesInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.SpeciesInfo>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.getSpeciesInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/GetSpeciesInfo',
      request,
      metadata || {},
      methodDescriptor_Backend_GetSpeciesInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.GetCreatureInfoRequest,
 *   !proto.backend.CreatureInfo>}
 */
const methodDescriptor_Backend_GetCreatureInfo = new grpc.web.MethodDescriptor(
  '/backend.Backend/GetCreatureInfo',
  grpc.web.MethodType.UNARY,
  proto.backend.GetCreatureInfoRequest,
  proto.backend.CreatureInfo,
  /**
   * @param {!proto.backend.GetCreatureInfoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.CreatureInfo.deserializeBinary
);


/**
 * @param {!proto.backend.GetCreatureInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.CreatureInfo)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.CreatureInfo>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.getCreatureInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/GetCreatureInfo',
      request,
      metadata || {},
      methodDescriptor_Backend_GetCreatureInfo,
      callback);
};


/**
 * @param {!proto.backend.GetCreatureInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.CreatureInfo>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.getCreatureInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/GetCreatureInfo',
      request,
      metadata || {},
      methodDescriptor_Backend_GetCreatureInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.CreateTopographyRequest,
 *   !proto.backend.CreateTopographyReply>}
 */
const methodDescriptor_Backend_CreateTopography = new grpc.web.MethodDescriptor(
  '/backend.Backend/CreateTopography',
  grpc.web.MethodType.UNARY,
  proto.backend.CreateTopographyRequest,
  proto.backend.CreateTopographyReply,
  /**
   * @param {!proto.backend.CreateTopographyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.CreateTopographyReply.deserializeBinary
);


/**
 * @param {!proto.backend.CreateTopographyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.CreateTopographyReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.CreateTopographyReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.createTopography =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/CreateTopography',
      request,
      metadata || {},
      methodDescriptor_Backend_CreateTopography,
      callback);
};


/**
 * @param {!proto.backend.CreateTopographyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.CreateTopographyReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.createTopography =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/CreateTopography',
      request,
      metadata || {},
      methodDescriptor_Backend_CreateTopography);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.DeleteTopographyRequest,
 *   !proto.backend.DeleteTopographyReply>}
 */
const methodDescriptor_Backend_DeleteTopography = new grpc.web.MethodDescriptor(
  '/backend.Backend/DeleteTopography',
  grpc.web.MethodType.UNARY,
  proto.backend.DeleteTopographyRequest,
  proto.backend.DeleteTopographyReply,
  /**
   * @param {!proto.backend.DeleteTopographyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.DeleteTopographyReply.deserializeBinary
);


/**
 * @param {!proto.backend.DeleteTopographyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.DeleteTopographyReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.DeleteTopographyReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.deleteTopography =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/DeleteTopography',
      request,
      metadata || {},
      methodDescriptor_Backend_DeleteTopography,
      callback);
};


/**
 * @param {!proto.backend.DeleteTopographyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.DeleteTopographyReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.deleteTopography =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/DeleteTopography',
      request,
      metadata || {},
      methodDescriptor_Backend_DeleteTopography);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.GetTopographyRequest,
 *   !proto.backend.TopographyTable>}
 */
const methodDescriptor_Backend_GetTopography = new grpc.web.MethodDescriptor(
  '/backend.Backend/GetTopography',
  grpc.web.MethodType.UNARY,
  proto.backend.GetTopographyRequest,
  proto.backend.TopographyTable,
  /**
   * @param {!proto.backend.GetTopographyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.TopographyTable.deserializeBinary
);


/**
 * @param {!proto.backend.GetTopographyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.TopographyTable)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.TopographyTable>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.getTopography =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/GetTopography',
      request,
      metadata || {},
      methodDescriptor_Backend_GetTopography,
      callback);
};


/**
 * @param {!proto.backend.GetTopographyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.TopographyTable>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.getTopography =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/GetTopography',
      request,
      metadata || {},
      methodDescriptor_Backend_GetTopography);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.TopographyTable,
 *   !proto.backend.SetTopographyReply>}
 */
const methodDescriptor_Backend_SetTopography = new grpc.web.MethodDescriptor(
  '/backend.Backend/SetTopography',
  grpc.web.MethodType.UNARY,
  proto.backend.TopographyTable,
  proto.backend.SetTopographyReply,
  /**
   * @param {!proto.backend.TopographyTable} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.SetTopographyReply.deserializeBinary
);


/**
 * @param {!proto.backend.TopographyTable} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.SetTopographyReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.SetTopographyReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.setTopography =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/SetTopography',
      request,
      metadata || {},
      methodDescriptor_Backend_SetTopography,
      callback);
};


/**
 * @param {!proto.backend.TopographyTable} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.SetTopographyReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.setTopography =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/SetTopography',
      request,
      metadata || {},
      methodDescriptor_Backend_SetTopography);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.AdvanceSimulationRequest,
 *   !proto.backend.AdvanceSimulationReply>}
 */
const methodDescriptor_Backend_AdvanceSimulation = new grpc.web.MethodDescriptor(
  '/backend.Backend/AdvanceSimulation',
  grpc.web.MethodType.UNARY,
  proto.backend.AdvanceSimulationRequest,
  proto.backend.AdvanceSimulationReply,
  /**
   * @param {!proto.backend.AdvanceSimulationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.AdvanceSimulationReply.deserializeBinary
);


/**
 * @param {!proto.backend.AdvanceSimulationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.AdvanceSimulationReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.AdvanceSimulationReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.advanceSimulation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/AdvanceSimulation',
      request,
      metadata || {},
      methodDescriptor_Backend_AdvanceSimulation,
      callback);
};


/**
 * @param {!proto.backend.AdvanceSimulationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.AdvanceSimulationReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.advanceSimulation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/AdvanceSimulation',
      request,
      metadata || {},
      methodDescriptor_Backend_AdvanceSimulation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.GetTextToggleRequest,
 *   !proto.backend.GetTextToggleReply>}
 */
const methodDescriptor_Backend_GetTextToggle = new grpc.web.MethodDescriptor(
  '/backend.Backend/GetTextToggle',
  grpc.web.MethodType.UNARY,
  proto.backend.GetTextToggleRequest,
  proto.backend.GetTextToggleReply,
  /**
   * @param {!proto.backend.GetTextToggleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.GetTextToggleReply.deserializeBinary
);


/**
 * @param {!proto.backend.GetTextToggleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.GetTextToggleReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.GetTextToggleReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.getTextToggle =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/GetTextToggle',
      request,
      metadata || {},
      methodDescriptor_Backend_GetTextToggle,
      callback);
};


/**
 * @param {!proto.backend.GetTextToggleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.GetTextToggleReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.getTextToggle =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/GetTextToggle',
      request,
      metadata || {},
      methodDescriptor_Backend_GetTextToggle);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.UpdateTextToggleRequest,
 *   !proto.backend.UpdateTextToggleReply>}
 */
const methodDescriptor_Backend_UpdateTextToggle = new grpc.web.MethodDescriptor(
  '/backend.Backend/UpdateTextToggle',
  grpc.web.MethodType.UNARY,
  proto.backend.UpdateTextToggleRequest,
  proto.backend.UpdateTextToggleReply,
  /**
   * @param {!proto.backend.UpdateTextToggleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.UpdateTextToggleReply.deserializeBinary
);


/**
 * @param {!proto.backend.UpdateTextToggleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.UpdateTextToggleReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.UpdateTextToggleReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.updateTextToggle =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/UpdateTextToggle',
      request,
      metadata || {},
      methodDescriptor_Backend_UpdateTextToggle,
      callback);
};


/**
 * @param {!proto.backend.UpdateTextToggleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.UpdateTextToggleReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.updateTextToggle =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/UpdateTextToggle',
      request,
      metadata || {},
      methodDescriptor_Backend_UpdateTextToggle);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.GetUpdateFlagRequest,
 *   !proto.backend.GetUpdateFlagReply>}
 */
const methodDescriptor_Backend_GetUpdateFlag = new grpc.web.MethodDescriptor(
  '/backend.Backend/GetUpdateFlag',
  grpc.web.MethodType.UNARY,
  proto.backend.GetUpdateFlagRequest,
  proto.backend.GetUpdateFlagReply,
  /**
   * @param {!proto.backend.GetUpdateFlagRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.GetUpdateFlagReply.deserializeBinary
);


/**
 * @param {!proto.backend.GetUpdateFlagRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.GetUpdateFlagReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.GetUpdateFlagReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.getUpdateFlag =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/GetUpdateFlag',
      request,
      metadata || {},
      methodDescriptor_Backend_GetUpdateFlag,
      callback);
};


/**
 * @param {!proto.backend.GetUpdateFlagRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.GetUpdateFlagReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.getUpdateFlag =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/GetUpdateFlag',
      request,
      metadata || {},
      methodDescriptor_Backend_GetUpdateFlag);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.EditUpdateFlagRequest,
 *   !proto.backend.EditUpdateFlagReply>}
 */
const methodDescriptor_Backend_EditUpdateFlag = new grpc.web.MethodDescriptor(
  '/backend.Backend/EditUpdateFlag',
  grpc.web.MethodType.UNARY,
  proto.backend.EditUpdateFlagRequest,
  proto.backend.EditUpdateFlagReply,
  /**
   * @param {!proto.backend.EditUpdateFlagRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.EditUpdateFlagReply.deserializeBinary
);


/**
 * @param {!proto.backend.EditUpdateFlagRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.EditUpdateFlagReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.EditUpdateFlagReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.editUpdateFlag =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/EditUpdateFlag',
      request,
      metadata || {},
      methodDescriptor_Backend_EditUpdateFlag,
      callback);
};


/**
 * @param {!proto.backend.EditUpdateFlagRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.EditUpdateFlagReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.editUpdateFlag =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/EditUpdateFlag',
      request,
      metadata || {},
      methodDescriptor_Backend_EditUpdateFlag);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.GetTimeOfSimulationRequest,
 *   !proto.backend.GetTimeOfSimulationReply>}
 */
const methodDescriptor_Backend_GetTimeOfSimulation = new grpc.web.MethodDescriptor(
  '/backend.Backend/GetTimeOfSimulation',
  grpc.web.MethodType.UNARY,
  proto.backend.GetTimeOfSimulationRequest,
  proto.backend.GetTimeOfSimulationReply,
  /**
   * @param {!proto.backend.GetTimeOfSimulationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.GetTimeOfSimulationReply.deserializeBinary
);


/**
 * @param {!proto.backend.GetTimeOfSimulationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.GetTimeOfSimulationReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.GetTimeOfSimulationReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.getTimeOfSimulation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/GetTimeOfSimulation',
      request,
      metadata || {},
      methodDescriptor_Backend_GetTimeOfSimulation,
      callback);
};


/**
 * @param {!proto.backend.GetTimeOfSimulationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.GetTimeOfSimulationReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.getTimeOfSimulation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/GetTimeOfSimulation',
      request,
      metadata || {},
      methodDescriptor_Backend_GetTimeOfSimulation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.backend.GetLightVisibilityRequest,
 *   !proto.backend.GetLightVisibilityReply>}
 */
const methodDescriptor_Backend_GetLightVisibility = new grpc.web.MethodDescriptor(
  '/backend.Backend/GetLightVisibility',
  grpc.web.MethodType.UNARY,
  proto.backend.GetLightVisibilityRequest,
  proto.backend.GetLightVisibilityReply,
  /**
   * @param {!proto.backend.GetLightVisibilityRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.backend.GetLightVisibilityReply.deserializeBinary
);


/**
 * @param {!proto.backend.GetLightVisibilityRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.backend.GetLightVisibilityReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.backend.GetLightVisibilityReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.backend.BackendClient.prototype.getLightVisibility =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/backend.Backend/GetLightVisibility',
      request,
      metadata || {},
      methodDescriptor_Backend_GetLightVisibility,
      callback);
};


/**
 * @param {!proto.backend.GetLightVisibilityRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.backend.GetLightVisibilityReply>}
 *     Promise that resolves to the response
 */
proto.backend.BackendPromiseClient.prototype.getLightVisibility =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/backend.Backend/GetLightVisibility',
      request,
      metadata || {},
      methodDescriptor_Backend_GetLightVisibility);
};


module.exports = proto.backend;

